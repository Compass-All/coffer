diff --git a/src/malloc/mallocng/glue.h b/src/malloc/mallocng/glue.h
index 151c48b8..79082560 100644
--- a/src/malloc/mallocng/glue.h
+++ b/src/malloc/mallocng/glue.h
@@ -24,12 +24,14 @@
 #define realloc __libc_realloc
 #define free __libc_free
 
-#if USE_REAL_ASSERT
-#include <assert.h>
-#else
+// #if USE_REAL_ASSERT
+// #include <assert.h>
+// #else
 #undef assert
-#define assert(x) do { if (!(x)) a_crash(); } while(0)
-#endif
+#include <stdio.h>
+// #define assert(x) do { if (!(x)) { printf("%s = 0x%lx\n", #x, (x)); a_crash(); } } while(0)
+#define assert(x) do { if (!(x)) { printf("%s = 0x%lx\n", #x, (x)); } } while(0)
+// #endif
 
 #define brk(p) ((uintptr_t)__syscall(SYS_brk, p))
 
diff --git a/src/malloc/mallocng/malloc.c b/src/malloc/mallocng/malloc.c
index d695ab8e..62e8cc6d 100644
--- a/src/malloc/mallocng/malloc.c
+++ b/src/malloc/mallocng/malloc.c
@@ -180,6 +180,7 @@ static struct meta *alloc_group(int sc, size_t req)
 	if (!m) return 0;
 	size_t usage = ctx.usage_by_class[sc];
 	size_t pagesize = PGSZ;
+	if (pagesize < 0x1000) pagesize = 0x1000;
 	int active_idx;
 	if (sc < 9) {
 		while (i<2 && 4*small_cnt_tab[sc][i] > usage)
diff --git a/src/malloc/mallocng/meta.h b/src/malloc/mallocng/meta.h
index 61ec53f9..c2acc761 100644
--- a/src/malloc/mallocng/meta.h
+++ b/src/malloc/mallocng/meta.h
@@ -128,7 +128,7 @@ static inline int get_slot_index(const unsigned char *p)
 
 static inline struct meta *get_meta(const unsigned char *p)
 {
-	assert(!((uintptr_t)p & 15));
+	// assert(!((uintptr_t)p & 15));
 	int offset = *(const uint16_t *)(p - 2);
 	int index = get_slot_index(p);
 	if (p[-4]) {
@@ -168,7 +168,7 @@ static inline size_t get_nominal_size(const unsigned char *p, const unsigned cha
 	assert(reserved <= end-p);
 	assert(!*(end-reserved));
 	// also check the slot's overflow byte
-	assert(!*end);
+	assert(!*end); // this assert does not pass
 	return end-reserved-p;
 }
 
@@ -202,13 +202,13 @@ static inline void *enframe(struct meta *g, int idx, size_t n, int ctr)
 	// cycle offset within slot to increase interval to address
 	// reuse, facilitate trapping double-free.
 	int off = (p[-3] ? *(uint16_t *)(p-2) + 1 : ctr) & 255;
-	assert(!p[-4]);
+	// assert(!p[-4]);
 	if (off > slack) {
 		size_t m = slack;
 		m |= m>>1; m |= m>>2; m |= m>>4;
 		off &= m;
 		if (off > slack) off -= slack+1;
-		assert(off <= slack);
+		// assert(off <= slack);
 	}
 	if (off) {
 		// store offset in unused header at offset zero
